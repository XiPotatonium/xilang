File = { SOI ~ UseStmt* ~ (Struct | Interface | Fn | Global | Enum)* ~ EOI }

UseStmt = { "use" ~ Path ~ ("as" ~ Id)? ~ Semi }

CustomAttribLst = { "#" ~ "[" ~ (CustomAttrib ~ ",")* ~ CustomAttrib? ~ "]" }
CustomAttrib = { Id ~ Args? }

Global = { "const" ~ Id ~ ":" ~ Type ~ "=" ~ LogOrExpr ~ Semi }
GenericDecl = {"<" ~ (Id ~ ",")* ~ Id? ~ ">"}
Enum = {
    CustomAttribLst* ~ "enum" ~ Id ~ GenericDecl? ~
    "{" ~ (Fn | EnumField)* ~ "}"
}
Struct = {
    CustomAttribLst* ~ "struct" ~ Id ~ GenericDecl? ~ Impls? ~
    "{" ~ (Fn | Field)* ~ "}"
}
Interface = {
    CustomAttribLst* ~ "interface" ~ Id ~ GenericDecl? ~ Impls? ~
    "{" ~ Fn* ~ "}"
}

Impls = { ":" ~ Path ~ ("," ~ Path)* ~ ","? }

Field = { Id ~ ":" ~ Type ~ "," }
EnumField = {Id ~ "(" ~ Type? ~ ")" ~ ","}

Fn = { CustomAttribLst* ~ "fn" ~ Id ~ GenericDecl? ~ (MethodParams | FnParams) ~ ("->" ~ Type)? ~ (BlockExpr | Semi) }
MethodParams = { "(" ~ KwLSelf ~ ("," ~ Id ~ ":" ~ Type)* ~ ","? ~ ")" }
FnParams = { "(" ~ (Id ~ ":" ~ Type ~ ",")* ~ (Id ~ ":" ~ Type)? ~ ")" }


Stmt = { LetStmt | ContinueStmt | BreakStmt | ReturnStmt | AssignStmt | ExprWithoutBlock ~ Semi | ExprWithBlock ~ Semi? }
LetStmt = { "let" ~ Pattern ~ (":" ~ Type)? ~ (Eq ~ Expr)? ~ Semi }
ContinueStmt = { "continue" ~ Semi }
BreakStmt = { "break" ~ Expr? ~ Semi }
ReturnStmt = { "return" ~ Expr? ~ Semi }
AssignStmt = { LogOrExpr ~ Eq ~ LogOrExpr ~ Semi }

Expr = _{ ExprWithBlock | ExprWithoutBlock }
ExprWithBlock = _{ BlockExpr | WhileExpr | LoopExpr | IfExpr }
ExprWithoutBlock = _{ LogOrExpr }

LoopExpr = { "loop" ~ BlockExpr }
WhileExpr = { "while" ~ Expr ~ BlockExpr }
IfExpr = { "if" ~ Expr ~ BlockExpr ~ ("else" ~ (BlockExpr | IfExpr))? }
BlockExpr = { "{" ~ Stmt* ~ ExprWithoutBlock? ~ "}" }


Args = { "(" ~ (Expr ~ ",")* ~ Expr? ~ ")" }
ObjAccExpr = { "." ~ IdG }
StaticAccExpr = { "::" ~ IdG }
ArrAccExpr = { "[" ~ Expr ~ "]" }
StructFieldInitExpr =  { Id ~ (":" ~ Expr)? }
StructInitExpr = {"{" ~ (StructFieldInitExpr ~ ",")* ~ StructFieldInitExpr? ~ "}"}
NewExpr = { "new" ~ Type ~ (StructInitExpr | ArrAccExpr) }
ParenExpr = { "(" ~ Expr ~ ")" }
LiteralExpr = {
    KwTrue
    | KwFalse
    | DecIntLiteral
    | FloatLiteral
    | StrLiteral
    | CharLiteral
}

PrimaryExpr = { LiteralExpr | KwLSelf | ParenExpr | ExprWithBlock | Type | NewExpr }
CallExpr = { PrimaryExpr ~ (Args | ObjAccExpr | StaticAccExpr | ArrAccExpr)* }
UnaryExpr = { (Not | Plus | Minus)* ~ CallExpr }
CastExpr = { UnaryExpr ~ ("as" ~ Type)* }
MulExpr = { CastExpr ~ ((Star | Slash | Percent) ~ CastExpr)* }
AddExpr = { MulExpr ~ ((Plus | Minus) ~ MulExpr)* }
CompExpr = { AddExpr ~ ((Le | Lt | Ge | Gt) ~ AddExpr)* }
EqExpr = { CompExpr ~ ((EqEq | Ne) ~ CompExpr)* }
LogAndExpr = { EqExpr ~ ("&&" ~ EqExpr)* }
LogOrExpr = { LogAndExpr ~ ("||" ~ LogAndExpr)* }


DecIntLiteral = { ASCII_DIGIT+ }
FloatLiteral = @{ ASCII_DIGIT* ~ "." ~ ASCII_DIGIT+ }
StrLiteral = @{ "\"" ~ ("\\" ~ ANY | !"\"" ~ ANY)* ~ "\"" }
CharLiteral = @{ "'" ~ ("\\" ~ ANY | !"'" ~ ANY)* ~ "'" }


Pattern = { Id | TuplePattern }
TuplePattern = { "(" ~ (Pattern ~ ",")* ~ Pattern? ~ ")" }

Type = { NonArrType ~ (LBracket ~ RBracket)? }
BasicType = _{ KwBool | KwChar | KwF32 | KwF64 | KwISize | KwI32 | KwI64 | KwUSize | KwStr | KwU8 | KwU32 | KwU64 }
TupleType = { "(" ~ (Type ~ ",")* ~ Type? ~ ")" }
NonArrType = _{
    BasicType
    | KwUSelf
    | Path
    | TupleType
}
Path = { Dot* ~ IdG ~ ("::" ~ IdG)* }
Id = @{
    !KeyWord ~ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")*
}
IdG = {Id ~ ("<" ~ (Type ~ ",")* ~ Type? ~ ">")?}


KwLSelf = { "self" }
KwUSelf = { "Self" }

KwBool = { "bool" }
KwChar = { "char" }
KwU8 = { "u8" }
KwU32 = { "u32" }
KwU64 = { "u64" }
KwI32 = { "i32" }
KwI64 = { "i64" }
KwUSize = { "usize" }
KwISize = { "isize" }
KwF32 = { "f32" }
KwF64 = { "f64" }
KwTrue = { "true" }
KwFalse = { "false" }
KwStr = { "str" }

KeyWord = @{
    "class" | "struct" | "interface" | "enum" | "union" | "fn" | "let" | "where" | "new"
    | "static" | "const" | "mut" | "pub" | "priv" | "virtual" | "override"
    | KwLSelf | KwUSelf | "base" | "super" | "crate" | "extern" | "mod" | "use"
    | "as" | "break" | "continue" | "else" | "for" | "if" | "in" | "loop" | "match" | "return" | "while"
    | KwBool | KwChar | KwU8 | KwU32 | KwU64 | KwI32 | KwI64 | KwUSize | KwISize | KwF32 | KwF64
    | KwFalse | KwTrue | "null" | KwStr
    | "yield" | "type" | "typeof"
}

Dot = { "." }
Eq = { "=" }
EqEq = { "==" }
Ne = { "!=" }
Ge = { ">=" }
Gt = { ">" }
Le = { "<=" }
Lt = { "<" }
Plus = { "+" }
Minus = { "-" }
Star = { "*" }
Slash = { "/" }
Percent = { "%" }
Not = { "!" }
Semi = { ";" }
LBracket = { "[" }
RBracket = { "]" }

WHITESPACE = _{ " " | "\t" | NEWLINE }
COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" | "//" ~ (!NEWLINE ~ ANY)* }
