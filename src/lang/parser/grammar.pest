File = { SOI ~ (Modules | ExternMod | UseDeclarations)* ~ Class* ~ EOI }

Modules = { "mod" ~ Id ~ Semi }
ExternMod = {"extern" ~ "mod" ~ Id ~ Semi}
UseDeclarations = { "use" ~ PathExpr ~ ("as" ~ Id)? ~ Semi }

AttributeLst = { "#" ~ "[" ~ Attribute ~ ("," ~ Attribute)* ~ "]" }
Attribute = { Id ~ ("(" ~ (LiteralExpr ~ ",")* ~ LiteralExpr? ~ ")")? }

Class = { 
    AttributeLst* ~ "class" ~ Id ~ ExtendsOrImpls? ~
    "{" ~ (AttributeLst* ~ (CCtor | Ctor | Method | StaticField | NonStaticField))* ~ "}" 
}

ExtendsOrImpls = { ":" ~ PathExpr ~ ("," ~ PathExpr)* }

StaticField = { "static" ~ Id ~ ":" ~ Type ~ Semi }
NonStaticField = { "let" ~ Id ~ ":" ~ Type ~ Semi }

CCtor = { "static" ~ BlockExpr }
Ctor = { "Self" ~ Params ~ (":" ~ KwBase ~ Args )? ~ BlockExpr }
Method = { "fn" ~ Id ~  Params ~ ("->" ~ Type)? ~ (BlockExpr | Semi) }
Params = { "(" ~ ((KwLSelf | Id ~ ":" ~ Type) ~ ("," ~ Id ~ ":" ~ Type)* ~ ","?)? ~ ")" }

Pattern = { Id | TuplePattern }
TuplePattern = { "(" ~ (Pattern ~ ",")* ~ Pattern? ~ ")" }

Type = { 
    BasicType
    | KwUSelf
    | PathExpr
    | TupleType
    | ArrType
}
BasicType = _{ KwBool | KwChar | KwI32 | KwF64 }
TupleType = { "(" ~ (Type ~ ",")* ~ Type? ~ ")" }
ArrType = { "[" ~ Type ~ ";" ~ Expr? ~ "]" }

Stmt = { LetStmt | ExprWithoutBlock ~ Semi | ExprWithBlock ~ Semi? }
LetStmt = { "let" ~ Pattern ~ (":" ~ Type)? ~ (Eq ~ Expr)? ~ Semi }
Expr = _{ ExprWithBlock | ExprWithoutBlock }
ExprWithBlock = _{ BlockExpr | LoopExpr | IfExpr }
ExprWithoutBlock = _{
    ContinueExpr
    | BreakExpr
    | ReturnExpr
    | AssignExpr
    | OpExpr
}

LoopExpr = { "loop" ~ BlockExpr }
IfExpr = { "if" ~ Expr ~ BlockExpr ~ ("else" ~ (BlockExpr | IfExpr))? }
BlockExpr = { "{" ~ Stmt* ~ ExprWithoutBlock? ~ "}" }

ContinueExpr = { "continue" }
BreakExpr = { "break" ~ Expr? }
ReturnExpr = { "return" ~ Expr? }

GroupedExpr = { "(" ~ Expr ~ ")" }
PrimaryExpr = { LiteralExpr | KwLSelf | GroupedExpr | ExprWithBlock | Type }
Args = { "(" ~ (Expr ~ ",")* ~ Expr? ~ ")" }
ObjAccessExpr = { "." ~ Id }
PathAccessExpr = { "::" ~ Id }
ArrAccessExpr = { "[" ~ Expr ~ "]" }
CallExpr = { PrimaryExpr ~ (Args | ObjAccessExpr | PathAccessExpr | ArrAccessExpr)* }
NewExpr = { "new" ~ Type ~ Args | CallExpr }
UnaryExpr = { (Not | Plus | Minus)* ~ NewExpr }
CastExpr = { UnaryExpr ~ ("as" ~ Type)* }
MulExpr = { CastExpr ~ ((Star | Slash | Percent) ~ CastExpr)* }
AddExpr = { MulExpr ~ ((Plus | Minus) ~ MulExpr)* }
CompExpr = { AddExpr ~ ((Le | Lt | Ge | Gt) ~ AddExpr)* }
EqExpr = { CompExpr ~ ((EqEq | Ne) ~ CompExpr)* }
LogAndExpr = { EqExpr ~ ("&&" ~ EqExpr)* }
LogOrExpr = { LogAndExpr ~ ("||" ~ LogAndExpr)* }
OpExpr = { LogOrExpr }
AssignExpr = { LogOrExpr ~ Eq ~ LogOrExpr }

LiteralExpr = {
    KwTrue
    | KwFalse
    | KwNull
    | EmptyLiteral
    | IntLiteral
    | FloatLiteral
    | StringLiteral
    | CharLiteral
}

EmptyLiteral = { "(" ~ ")" }
IntLiteral = { ASCII_DIGIT+ }
FloatLiteral = @{ ASCII_DIGIT* ~ "." ~ ASCII_DIGIT+ }
StringLiteral = @{ "\"" ~ ("\\" ~ ANY | !"\"" ~ ANY)* ~ "\"" }
CharLiteral = @{ "'" ~ ("\\" ~ ANY | !"'" ~ ANY)* ~ "'" }

PathExpr = ${ (Id | KwCrate | KwSuper) ~ ("::" ~ (Id | KwSuper))* }
Id = @{ !KeyWord ~ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }

KwBase = { "base" }
KwLSelf = { "self" }
KwUSelf = { "Self" }
KwSuper = { "super" }
KwCrate = { "crate" }
KwBool = { "bool" }
KwChar = { "char" }
KwU8 = { "u8" }
KwI8 = { "i8" }
KwU16 = { "u16" }
KwI16 = { "i16" }
KwU32 = { "u32" }
KwI32 = { "i32" }
KwU64 = { "u64" }
KwI64 = { "i64" }
KwUSize = { "usize" }
KwISize = { "isize" }
KwF32 = { "f32" }
KwF64 = { "f64" }
KwTrue = { "true" }
KwFalse = { "false" }
KwNull = { "null" }
KeyWord = @{ 
    "class" | "struct" | "enum" | "union" | "interface" | "fn" | "let" | "where" | "new"
    | "static" | "const" | "mut" | "priv" | "pub" | "virtual" | "override"
    | KwLSelf | KwUSelf | KwBase | KwSuper | KwCrate | "extern" | "mod" | "use"
    | "as" | "break" | "continue" | "else" | "for" | "if" | "in" | "loop" | "match" | "return" | "while"
    | KwBool | KwChar | KwU8 | KwI8 | KwU16 | KwI16 | KwU32 | KwI32 | KwU64 | KwI64 | KwUSize | KwISize | KwF32 | KwF64
    | KwFalse | KwTrue | KwNull
    | "yield" | "typeof"
}

Eq = { "=" }
EqEq = { "==" }
Ne = { "!=" }
Ge = { ">=" }
Gt = { ">" }
Le = { "<=" }
Lt = { "<" }
Plus = { "+" }
Minus = { "-" }
Star = { "*" }
Slash = { "/" }
Percent = { "%" }
Not = { "!" }
Semi = { ";" }

WHITESPACE = _{ " " | "\t" | NEWLINE }
COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" | "//" ~ (!NEWLINE ~ ANY)* }

